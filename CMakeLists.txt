cmake_minimum_required(VERSION 2.6)
project(clTessendorf)
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

find_package(OpenCL REQUIRED)
include_directories(${OpenCL_INCLUDE_DIR})

find_package(clFFT REQUIRED)
include_directories(${CLFFT_INCLUDE_DIRS})

find_package(SDL2 REQUIRED)
include_directories(${SDL2_INCLUDE_DIR})

find_package(SDL2_ttf REQUIRED)
include_directories(${SDL2_TTF_INCLUDE_DIR})

find_package(OpenGL REQUIRED)
include_directories(${OpenGL_INCLUDE_DIRS})
add_definitions(${OpenGL_DEFINITIONS})

find_package(GLM REQUIRED)
include_directories(${GLM_INCLUDE_DIRS})

find_package(DevIL REQUIRED)
include_directories(${IL_INCLUDE_DIR})

# Generated by gl3w_gen.py (https://github.com/skaslev/gl3w)
set(GL3W_HEADERS include/GL/gl3w.h include/GL/glcorearb.h)
set(GL3W_SOURCES src/GL/gl3w.c)

file(GLOB SHADER_SRC "shaders/*.glsl")
file(GLOB KERNEL_SRC "kernels/*.cl")
set(HEADERS ${GL3W_HEADERS})
set(SOURCES src/main.cpp ${GL3W_SOURCES} ${SHADER_SRC} ${KERNEL_SRC})
foreach(DIRECTORY "." ocean rendering scene util api "api/io" "api/gpu" "api/os")
    file(GLOB TMP_HDR "include/${DIRECTORY}/*.h")
    file(GLOB TMP_SRC "src/${DIRECTORY}/*.cpp")
    list(APPEND HEADERS ${TMP_HDR})
    list(APPEND SOURCES ${TMP_SRC})
endforeach(DIRECTORY)

include_directories(include)

add_executable(cl_tessendorf ${HEADERS} ${SOURCES})
target_link_libraries(cl_tessendorf ${OpenCL_LIBRARY} ${CLFFT_LIBRARIES}
    ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY} ${SDL2_LIBRARY} ${SDL2_TTF_LIBRARY} ${IL_LIBRARIES} ${ILU_LIBRARIES})
