cmake_minimum_required(VERSION 2.6)
project(ocean_demo)
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

find_package(OpenCL REQUIRED)
include_directories(${OpenCL_INCLUDE_DIR})

find_package(clFFT REQUIRED)
include_directories(${CLFFT_INCLUDE_DIRS})

find_package(SDL2 REQUIRED)
include_directories(${SDL2_INCLUDE_DIR})

find_package(SDL2_ttf REQUIRED)
include_directories(${SDL2_TTF_INCLUDE_DIR})

find_package(OpenGL REQUIRED)
include_directories(${OpenGL_INCLUDE_DIRS})
add_definitions(${OpenGL_DEFINITIONS})

find_package(GLM REQUIRED)
include_directories(${GLM_INCLUDE_DIRS})

find_package(DevIL REQUIRED)
include_directories(${IL_INCLUDE_DIR})

# imgui
file(GLOB IMGUI_SRC external/imgui/*.cpp)
add_library(imgui STATIC ${IMGUI_SRC})
target_include_directories(imgui PUBLIC external/imgui)

# Generated by gl3w_gen.py (https://github.com/skaslev/gl3w)
set(GL3W_HEADERS include/GL/gl3w.h include/GL/glcorearb.h)
set(GL3W_SOURCES src/GL/gl3w.c)

file(GLOB SHADER_SRC "shaders/*.glsl")
file(GLOB KERNEL_SRC "kernels/*.cl")
set(HEADERS ${GL3W_HEADERS})
set(SOURCES src/main.cpp ${GL3W_SOURCES} ${SHADER_SRC} ${KERNEL_SRC})
foreach(DIRECTORY "." ocean rendering scene util api "api/io" "api/gpu" "api/os")
    file(GLOB TMP_HDR "include/${DIRECTORY}/*.h")
    file(GLOB TMP_SRC "src/${DIRECTORY}/*.cpp")
    list(APPEND HEADERS ${TMP_HDR})
    list(APPEND SOURCES ${TMP_SRC})
endforeach(DIRECTORY)

include_directories(include)

add_executable(ocean_demo ${HEADERS} ${SOURCES})
target_link_libraries(ocean_demo imgui ${CLFFT_LIBRARIES} ${OpenCL_LIBRARY}
    ${SDL2_TTF_LIBRARY} ${SDL2_LIBRARY} ${ILU_LIBRARIES} ${IL_LIBRARIES} ${OPENGL_glu_LIBRARY} ${OPENGL_gl_LIBRARY} ${CMAKE_DL_LIBS})
target_compile_features(ocean_demo PRIVATE cxx_range_for cxx_auto_type)

# Cube map -> stereographic projection tool.
add_executable(cube2sgproj
    tools/cube2sgproj/main.cpp
    tools/cube2sgproj/sgproj.glsl
    src/util/log.cpp
    src/util/util.cpp
    src/api/gpu/graphics.cpp
    src/api/os/window.cpp
    src/api/os/imgui_impl_sdl_gl3.cpp
    src/api/io/image.cpp
    src/rendering/cubemap.cpp
    src/rendering/quad.cpp
    src/rendering/shader_effect.cpp
    ${GL3W_HEADERS} ${GL3W_SOURCES})
target_link_libraries(cube2sgproj imgui ${SDL2_LIBRARY} ${ILU_LIBRARIES} ${IL_LIBRARIES} ${OPENGL_glu_LIBRARY} ${OPENGL_gl_LIBRARY} ${CMAKE_DL_LIBS})
